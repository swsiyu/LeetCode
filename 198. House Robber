/*public class Solution {
    public int rob(int[] nums) {
        if(nums.length == 0)return 0;
        boolean flag = true;
        int sum = 0;
        while(flag){
            // change flag
            flag = false;
            
            int max = 0;
            //get the max num
            for(int i = 0;i < nums.length;i++){
                if(nums[i] > nums[max])max = i;
                if(nums[i] != 0)flag = true;
            }
            //change sum
            sum += nums[max];
            
            // chang nums
            nums[max] = 0;
            if(max != 0)nums[max - 1] = 0;
            if(max != nums.length - 1)nums[max + 1] = 0;
            
        }
        return sum;
    }
}*/
public class Solution{
    public int rob(int[] nums){
        int length = nums.length;
        if(length == 0)return 0;
        int money[] = new int[length];
        for(int i=0;i<length;i++){
            if(i == 0)money[i] = nums[i];
            else if(i == 1)money[i] = Math.max(nums[i-1],nums[i]);
            else{
                money[i] = Math.max(nums[i]+money[i-2],money[i-1]);
            }
        }
        return money[length-1];
    }
}

/*
  1.money为储存动态规划结果的数组
  2.对于长度n > 3 的数组,那么在money的结果应该是: money[i-2]+nums[i] 和 money[i-1]中的更大值.
*/
